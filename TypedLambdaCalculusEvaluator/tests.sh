
cd classes

#scala fos.SimplyTyped "fst ((\\x:Nat . {pred x, succ x}) 3)"
#scala fos.SimplyTyped "let x: Nat = true in x "
#scala fos.SimplyTyped "let x: Nat = pred pred 0 in x"
scala fos.SimplyTyped "if true then fst snd {1, {2, 3}} else 4"
exit

# Hard test
scala fos.SimplyTyped "if snd {false, true} then (\\x:Nat*Nat->Bool . x {1, 1}) (\\x:Nat*Nat. iszero fst x) else true"

scala fos.SimplyTyped "1 2 3"
scala fos.SimplyTyped "if true then fst {1, false} else snd {true, 0}"
scala fos.SimplyTyped "if true then fst {1, false} else snd {1, false}"

scala fos.SimplyTyped "true"
scala fos.SimplyTyped "false"
scala fos.SimplyTyped "5"
scala fos.SimplyTyped "succ 0"
scala fos.SimplyTyped "pred 0"
scala fos.SimplyTyped "iszero 0"
scala fos.SimplyTyped "pred 4"
scala fos.SimplyTyped "if true then succ pred 0 else 0"
scala fos.SimplyTyped "if if true then false else false then true else false"
scala fos.SimplyTyped "\\x: Bool . y"
scala fos.SimplyTyped "\\x: Bool -> Nat -> Bool * Nat . y"
scala fos.SimplyTyped "\\x: Nat * Nat -> Bool . y"
scala fos.SimplyTyped "\\x: Bool -> Nat * (Nat -> Nat) . y"
scala fos.SimplyTyped "\\x: (Nat * Nat) . y"
scala fos.SimplyTyped "x y z"
scala fos.SimplyTyped "fst snd {x,{y,z}} "
scala fos.SimplyTyped "z let x : Nat * Nat = \\x: Nat. y in x x "
scala fos.SimplyTyped "let x : Nat = succ pred 0 in iszero x"
scala fos.SimplyTyped "succ pred 1"
scala fos.SimplyTyped "pred true"
scala fos.SimplyTyped "succ pred pred true"
scala fos.SimplyTyped "iszero false"
scala fos.SimplyTyped "if pred true then 1 else 2"
scala fos.SimplyTyped "if true then 1 else false"
scala fos.SimplyTyped "if pred succ pred pred 0 then 1 else 5"
scala fos.SimplyTyped "if iszero 3 then 2 else 1"
scala fos.SimplyTyped "\\x:Nat . if false then true else false "
scala fos.SimplyTyped "\\x:Nat . if false then pred true else false "
scala fos.SimplyTyped "\\x:Nat . if iszero 5 then \\x: Nat. if true then false else iszero pred 6  else \\x : Nat. false "
scala fos.SimplyTyped "\\x:Nat . x"
scala fos.SimplyTyped "x"
scala fos.SimplyTyped "\\x:Nat. (\\x:Bool. x)"
scala fos.SimplyTyped "\\x:Nat. \\x:Nat. x iszero x"
scala fos.SimplyTyped "\\x:Nat. \\y:Bool->Nat. y iszero x"
scala fos.SimplyTyped "let x : Nat = x in let y:Bool = y in y"
scala fos.SimplyTyped "(\\y:Nat . (z x))"
scala fos.SimplyTyped "\\x:Nat . (\\y:Nat . ((x y) x))"
scala fos.SimplyTyped "x y"
scala fos.SimplyTyped "\\x:Nat . \\y:Nat . z y"
scala fos.SimplyTyped "(\\x:Nat . x) ((\\x:Nat . x) (\\z:Nat. (\\x:Nat . x) z))"
scala fos.SimplyTyped "\\t:Bool . \\f:Bool . t"
scala fos.SimplyTyped "\\t:Bool . \\f:Bool . f"
scala fos.SimplyTyped "\\l:Bool . \\m:Bool . \\n:Bool . l m n"
scala fos.SimplyTyped "let n:Nat = ((\\y:Nat . succ y) 1) in n"
scala fos.SimplyTyped "{true, {false, 5}}"
scala fos.SimplyTyped "fst {true, 0}"
scala fos.SimplyTyped "snd {true, \\x:Nat. iszero x}"
scala fos.SimplyTyped "(\\y:Nat. y) true"
scala fos.SimplyTyped "(\\x:Bool. (\\y:Nat . y) x) true"
scala fos.SimplyTyped "let x : Bool = iszero 4 in (\\y:Bool . y) x"
scala fos.SimplyTyped "iszero 0"
scala fos.SimplyTyped "iszero true"
scala fos.SimplyTyped "iszero succ pred succ pred 0"
scala fos.SimplyTyped "iszero pred 0"
scala fos.SimplyTyped "if false then false else if false then true else iszero succ pred succ pred pred 0"
scala fos.SimplyTyped "if false then false else if false then true else iszero true"
scala fos.SimplyTyped "(\\x:Nat->Nat.x) (\\x:Nat. (\\x:Nat.x) x)"
scala fos.SimplyTyped "if true then (\\x:Bool. (\\x:Bool.x) x) true else (\\y:Bool.y) false"
scala fos.SimplyTyped "(\\y:Bool.((\\x:Bool.(\\y:Bool.x)) y)) true"
scala fos.SimplyTyped "(\\y:Bool.((\\x:Bool.(\\y:Bool.y)) y)) true"
scala fos.SimplyTyped "((\\x:Nat.iszero x) succ 0)"
scala fos.SimplyTyped "let x : Nat = 2 in let x : Nat = succ x in succ x "
scala fos.SimplyTyped "let x : Nat = 2 in let x : Nat = pred x in succ x"
scala fos.SimplyTyped "{if iszero 0 then 1 else 0, (\\x:Nat. succ succ x) 0}"
scala fos.SimplyTyped "fst {if iszero 0 then 1 else 0, (\\x:Nat. succ succ x) 0}"
scala fos.SimplyTyped "snd {if iszero 0 then 1 else 0, (\\x:Nat. succ succ x) 0}"
scala fos.SimplyTyped "fst {pred 4, if true then false else false}"
scala fos.SimplyTyped "snd {pred 4, if true then false else false}"
scala fos.SimplyTyped "(\\x:Nat*Nat. snd x) {pred 4, pred 5}"

